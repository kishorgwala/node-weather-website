import React, { useState } from 'react';

const DynamicForm = () => {
  const [fields, setFields] = useState([{ type: 'text', name: '', value: '' }]);

  const handleAddField = (fieldType) => {
    setFields([...fields, { type: fieldType, name: '', value: '' }]);
  };

  const handleRemoveField = (index) => {
    setFields(fields.filter((_, i) => i !== index));
  };

  const handleFieldChange = (index, event) => {
    const updatedFields = fields.map((field, i) =>
      i === index ? { ...field, [event.target.name]: event.target.value } : field
    );
    setFields(updatedFields);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log(fields); // Process the form data here
  };

  const renderField = (field, index) => {
    switch (field.type) {
      case 'text':
        return (
          <input
            type="text"
            name="value"
            placeholder="Field Value"
            value={field.value}
            onChange={(e) => handleFieldChange(index, e)}
          />
        );
      case 'select':
        return (
          <select
            name="value"
            value={field.value}
            onChange={(e) => handleFieldChange(index, e)}
          >
            <option value="">Select an option</option>
            <option value="option1">Option 1</option>
            <option value="option2">Option 2</option>
          </select>
        );
      case 'checkbox':
        return (
          <input
            type="checkbox"
            name="value"
            checked={field.value === 'true'}
            onChange={(e) => handleFieldChange(index, { ...e, target: { ...e.target, value: e.target.checked ? 'true' : 'false' } })}
          />
        );
      default:
        return null;
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {fields.map((field, index) => (
        <div key={index}>
          <input
            type="text"
            name="name"
            placeholder="Field Name"
            value={field.name}
            onChange={(e) => handleFieldChange(index, e)}
          />
          {renderField(field, index)}
          <button type="button" onClick={() => handleRemoveField(index)}>Remove</button>
        </div
